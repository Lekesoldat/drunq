/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { Context } from "./../context"
import { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import { core } from "nexus"


declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  SignInInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  SignUpInput: { // input type
    birthDate: string; // String!
    email: string; // String!
    gender: NexusGenEnums['Gender']; // Gender!
    name: string; // String!
    password: string; // String!
    weight: number; // Float!
  }
}

export interface NexusGenEnums {
  Gender: "FEMALE" | "MALE"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  AccessToken: { // root type
    accessToken?: string | null; // String
  }
  Consumption: { // root type
    id?: string | null; // ID
    time: NexusGenScalars['DateTime']; // DateTime!
  }
  Drink: { // root type
    id: string; // String!
    name?: string | null; // String
    percentage?: number | null; // Float
    volume?: number | null; // Float
  }
  InvalidPasswordError: { // root type
    message: string; // String!
  }
  Mutation: {};
  Participant: { // root type
    joinedDate: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: {};
  Session: { // root type
    code?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
  }
  User: { // root type
    birthDate: NexusGenScalars['DateTime']; // DateTime!
    email?: string | null; // String
    gender?: NexusGenEnums['Gender'] | null; // Gender
    id?: string | null; // ID
    name?: string | null; // String
    weight?: number | null; // Float
  }
  UserNotFoundError: { // root type
    message: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
  GetUserResult: core.Discriminate<'User', 'required'> | core.Discriminate<'UserNotFoundError', 'required'>;
  SignInResult: core.Discriminate<'AccessToken', 'required'> | core.Discriminate<'InvalidPasswordError', 'required'> | core.Discriminate<'UserNotFoundError', 'required'>;
}

export type NexusGenRootTypes = NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AccessToken: { // field return type
    accessToken: string | null; // String
  }
  Consumption: { // field return type
    drink: NexusGenRootTypes['Drink'] | null; // Drink
    id: string | null; // ID
    time: NexusGenScalars['DateTime']; // DateTime!
  }
  Drink: { // field return type
    id: string; // String!
    name: string | null; // String
    percentage: number | null; // Float
    volume: number | null; // Float
  }
  InvalidPasswordError: { // field return type
    message: string; // String!
  }
  Mutation: { // field return type
    signIn: boolean | null; // Boolean
    signOut: boolean | null; // Boolean
    signUp: boolean | null; // Boolean
  }
  Participant: { // field return type
    consumptions: Array<NexusGenRootTypes['Consumption'] | null> | null; // [Consumption]
    currentBAC: number | null; // Float
    joinedDate: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    allConsumptions: Array<NexusGenRootTypes['Consumption'] | null> | null; // [Consumption]
    allDrinks: Array<NexusGenRootTypes['Drink'] | null> | null; // [Drink]
    allUsers: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    me: NexusGenRootTypes['User'] | null; // User
    mySessions: Array<NexusGenRootTypes['Session'] | null> | null; // [Session]
  }
  Session: { // field return type
    code: string | null; // String
    id: string | null; // ID
    name: string | null; // String
    owner: NexusGenRootTypes['User'] | null; // User
    participants: Array<NexusGenRootTypes['Participant'] | null> | null; // [Participant]
  }
  User: { // field return type
    birthDate: NexusGenScalars['DateTime']; // DateTime!
    email: string | null; // String
    gender: NexusGenEnums['Gender'] | null; // Gender
    id: string | null; // ID
    name: string | null; // String
    weight: number | null; // Float
  }
  UserNotFoundError: { // field return type
    message: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  AccessToken: { // field return type name
    accessToken: 'String'
  }
  Consumption: { // field return type name
    drink: 'Drink'
    id: 'ID'
    time: 'DateTime'
  }
  Drink: { // field return type name
    id: 'String'
    name: 'String'
    percentage: 'Float'
    volume: 'Float'
  }
  InvalidPasswordError: { // field return type name
    message: 'String'
  }
  Mutation: { // field return type name
    signIn: 'Boolean'
    signOut: 'Boolean'
    signUp: 'Boolean'
  }
  Participant: { // field return type name
    consumptions: 'Consumption'
    currentBAC: 'Float'
    joinedDate: 'DateTime'
    user: 'User'
  }
  Query: { // field return type name
    allConsumptions: 'Consumption'
    allDrinks: 'Drink'
    allUsers: 'User'
    me: 'User'
    mySessions: 'Session'
  }
  Session: { // field return type name
    code: 'String'
    id: 'ID'
    name: 'String'
    owner: 'User'
    participants: 'Participant'
  }
  User: { // field return type name
    birthDate: 'DateTime'
    email: 'String'
    gender: 'Gender'
    id: 'ID'
    name: 'String'
    weight: 'Float'
  }
  UserNotFoundError: { // field return type name
    message: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    signIn: { // args
      credentials: NexusGenInputs['SignInInput']; // SignInInput!
    }
    signUp: { // args
      user: NexusGenInputs['SignUpInput']; // SignUpInput!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  GetUserResult: "User" | "UserNotFoundError"
  SignInResult: "AccessToken" | "InvalidPasswordError" | "UserNotFoundError"
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    __typename: true
    isTypeOf: false
    resolveType: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}