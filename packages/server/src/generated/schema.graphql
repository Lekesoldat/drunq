### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AccessToken {
  accessToken: String
}

type Consumption {
  drink: Drink
  id: ID
  time: DateTime!
}

scalar DateTime

type Drink {
  id: String!
  name: String
  percentage: Float
  volume: Float
}

"""The available genders."""
enum Gender {
  FEMALE
  MALE
}

union GetUserResult = User | UserNotFoundError

type InvalidPasswordError {
  message: String!
}

type Mutation {
  signIn(credentials: SignInInput!): Boolean
  signOut: Boolean
  signUp(user: SignUpInput!): Boolean
}

type Participant {
  consumptions: [Consumption]
  currentBAC: Float
  joinedDate: DateTime!
  user: User
}

type Query {
  allConsumptions: [Consumption]
  allDrinks: [Drink]
  allUsers: [User]
  me: User
  mySessions: [Session]
}

type Session {
  code: String
  id: ID
  name: String
  owner: User
  participants: [Participant]
}

input SignInInput {
  email: String!
  password: String!
}

union SignInResult = AccessToken | InvalidPasswordError | UserNotFoundError

input SignUpInput {
  birthDate: String!
  email: String!
  gender: Gender!
  name: String!
  password: String!
  weight: Float!
}

type User {
  birthDate: DateTime!
  email: String
  gender: Gender
  id: ID
  name: String
  weight: Float
}

type UserNotFoundError {
  message: String!
}
